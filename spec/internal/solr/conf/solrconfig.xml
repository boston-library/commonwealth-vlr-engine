<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
     For more details about configurations options that may appear in
     this file, see https://solr.apache.org/guide/solr/latest/configuration-guide/configuring-solrconfig-xml.html.
-->
<config>
  <!-- In all configuration below, a prefix of "solr." for class names
       is an alias that causes solr to search appropriate packages,
       including org.apache.solr.(search|update|request|core|analysis)

       You may also specify a fully qualified Java classname if you
       have your own custom plugins.
    -->

  <!-- Controls what version of Lucene various components of Solr
       adhere to.  Generally, you want to use the latest version to
       get all bug fixes and improvements. It is highly recommended
       that you fully re-index after changing this setting as it can
       affect both how text is indexed and queried.
  -->
  <luceneMatchVersion>9.11</luceneMatchVersion>

  <!-- <lib/> directives can be used to instruct Solr to load any Jars
       identified and use them to resolve any "plugins" specified in
       your solrconfig.xml or schema.xml (ie: Analyzers, Request
       Handlers, etc...).

       All directories and paths are resolved relative to the
       instanceDir.

       Please note that <lib/> directives are processed in the order
       that they appear in your solrconfig.xml file, and are "stacked"
       on top of each other when building a ClassLoader - so if you have
       plugin jars with dependencies on other jars, the "lower level"
       dependency jars should be loaded first.

       If a "./lib" directory exists in your instanceDir, all files
       found in it are included as if you had used the following
       syntax...
    -->
  
  <!-- needed for solr.ICUFoldingFilterFactory -->
  <!-- additional libs are tricky in Solr >= 9.8,
       see: https://solr.apache.org/guide/solr/latest/configuration-guide/libs.html -->
  <!-- <lib dir="${solr.install.dir:../../../..}/modules/analysis-extras/lib" regex=".*\.jar" /> -->

  <!-- A 'dir' option by itself adds any files found in the directory
       to the classpath, this is useful for including all jars in a
       directory.

       When a 'regex' is specified in addition to a 'dir', only the
       files in that directory which completely match the regex
       (anchored on both ends) will be included.

       If a 'dir' option (with or without a regex) is used and nothing
       is found that matches, a warning will be logged.

       The example below can be used to load a Solr Module along
       with their external dependencies.
    -->
    <!-- <lib dir="${solr.install.dir:../../../..}/modules/ltr/lib" regex=".*\.jar" /> -->

  <!-- an exact 'path' can be used instead of a 'dir' to specify a
       specific jar file.  This will cause a serious error to be logged
       if it can't be loaded.
    -->
  <!--
     <lib path="../a-jar-that-does-not-exist.jar" />
  -->

  <!-- Data Directory

       Used to specify an alternate directory to hold all index data
       other than the default ./data under the Solr home.  If
       replication is in use, this should match the replication
       configuration.
    -->
  <dataDir>${solr.data.dir:}</dataDir>


  <!-- The DirectoryFactory to use for indexes.

       solr.StandardDirectoryFactory is filesystem
       based and tries to pick the best implementation for the current
       JVM and platform.  solr.NRTCachingDirectoryFactory, the default,
       wraps solr.StandardDirectoryFactory and caches small files in memory
       for better NRT performance.

       One can force a particular implementation via solr.MMapDirectoryFactory
       or solr.NIOFSDirectoryFactory.

       solr.RAMDirectoryFactory is memory based and not persistent.
    -->
  <directoryFactory name="DirectoryFactory"
                    class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>

  <!-- The CodecFactory for defining the format of the inverted index.
       The default implementation is SchemaCodecFactory, which is the official Lucene
       index format, but hooks into the schema to provide per-field customization of
       the postings lists and per-document values in the fieldType element
       (postingsFormat/docValuesFormat). Note that most of the alternative implementations
       are experimental, so if you choose to customize the index format, it's a good
       idea to convert back to the official format e.g. via IndexWriter.addIndexes(IndexReader)
       before upgrading to a newer version to avoid unnecessary reindexing.
       A "compressionMode" string element can be added to <codecFactory> to choose
       between the existing compression modes in the default codec: "BEST_SPEED" (default)
       or "BEST_COMPRESSION".
  -->
  <codecFactory class="solr.SchemaCodecFactory"/>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       Index Config - These settings control low-level behavior of indexing
       Most example settings here show the default value, but are commented
       out, to more easily see where customizations have been made.

       Note: This replaces <indexDefaults> and <mainIndex> from older versions
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <indexConfig>
    <!-- maxFieldLength was removed in 4.0. To get similar behavior, include a
         LimitTokenCountFilterFactory in your fieldType definition. E.g.
     <filter class="solr.LimitTokenCountFilterFactory" maxTokenCount="10000"/>
    -->
    <!-- Maximum time to wait for a write lock (ms) for an IndexWriter. Default: 1000 -->
    <!-- <writeLockTimeout>1000</writeLockTimeout>  -->

    <!-- Expert: Enabling compound file will use less files for the index,
         using fewer file descriptors on the expense of performance decrease.
         Default in Lucene is "true". Default in Solr is "false" (since 3.6) -->
    <!-- <useCompoundFile>false</useCompoundFile> -->

    <!-- ramBufferSizeMB sets the amount of RAM that may be used by Lucene
         indexing for buffering added documents and deletions before they are
         flushed to the Directory.
         maxBufferedDocs sets a limit on the number of documents buffered
         before flushing.
         If both ramBufferSizeMB and maxBufferedDocs is set, then
         Lucene will flush based on whichever limit is hit first.  -->
    <!-- <ramBufferSizeMB>100</ramBufferSizeMB> -->
    <!-- <maxBufferedDocs>1000</maxBufferedDocs> -->

    <!-- Expert: ramPerThreadHardLimitMB sets the maximum amount of RAM that can be consumed
         per thread before they are flushed. When limit is exceeded, this triggers a forced
         flush even if ramBufferSizeMB has not been exceeded.
         This is a safety limit to prevent Lucene's DocumentsWriterPerThread from address space
         exhaustion due to its internal 32 bit signed integer based memory addressing.
         The specified value should be greater than 0 and less than 2048MB. When not specified,
         Solr uses Lucene's default value 1945. -->
    <!-- <ramPerThreadHardLimitMB>1945</ramPerThreadHardLimitMB> -->

    <!-- Expert: Merge Policy
         The Merge Policy in Lucene controls how merging of segments is done.
         The default since Solr/Lucene 3.3 is TieredMergePolicy.
         The default since Lucene 2.3 was the LogByteSizeMergePolicy,
         Even older versions of Lucene used LogDocMergePolicy.
      -->
    <!--
        <mergePolicyFactory class="org.apache.solr.index.TieredMergePolicyFactory">
          <int name="maxMergeAtOnce">10</int>
          <int name="segmentsPerTier">10</int>
          <double name="noCFSRatio">0.1</double>
        </mergePolicyFactory>
      -->

    <!-- Expert: Merge Scheduler
         The Merge Scheduler in Lucene controls how merges are
         performed.  The ConcurrentMergeScheduler (Lucene 2.3 default)
         can perform merges in the background using separate threads.
         The SerialMergeScheduler (Lucene 2.2 default) does not.
     -->
    <!--
       <mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler"/>
       -->

    <!-- LockFactory

         This option specifies which Lucene LockFactory implementation
         to use.

         single = SingleInstanceLockFactory - suggested for a
                  read-only index or when there is no possibility of
                  another process trying to modify the index.
         native = NativeFSLockFactory - uses OS native file locking.
                  Do not use when multiple solr webapps in the same
                  JVM are attempting to share a single index.
         simple = SimpleFSLockFactory  - uses a plain file for locking

         Defaults: 'native' is default for Solr3.6 and later, otherwise
                   'simple' is the default

         More details on the nuances of each LockFactory...
         https://cwiki.apache.org/confluence/display/lucene/AvailableLockFactories
    -->
    <lockType>${solr.lock.type:native}</lockType>

    <!-- Commit Deletion Policy
         Custom deletion policies can be specified here. The class must
         implement org.apache.lucene.index.IndexDeletionPolicy.

         The default Solr IndexDeletionPolicy implementation supports
         deleting index commit points on number of commits, age of
         commit point and optimized status.

         The latest commit point should always be preserved regardless
         of the criteria.
    -->
    <!--
    <deletionPolicy class="solr.SolrDeletionPolicy">
    -->
    <!-- The number of commit points to be kept -->
    <!-- <str name="maxCommitsToKeep">1</str> -->
    <!-- The number of optimized commit points to be kept -->
    <!-- <str name="maxOptimizedCommitsToKeep">0</str> -->
    <!--
        Delete all commit points once they have reached the given age.
        Supports DateMathParser syntax e.g.
      -->
    <!--
       <str name="maxCommitAge">30MINUTES</str>
       <str name="maxCommitAge">1DAY</str>
    -->
    <!--
    </deletionPolicy>
    -->

    <!-- Lucene Infostream

         To aid in advanced debugging, Lucene provides an "InfoStream"
         of detailed information when indexing.

         Setting The value to true will instruct the underlying Lucene
         IndexWriter to write its debugging info the specified file
      -->
    <!-- <infoStream file="INFOSTREAM.txt">false</infoStream> -->
  </indexConfig>

  <!-- The default high-performance update handler -->
  <updateHandler class="solr.DirectUpdateHandler2">

    <!-- Enables a transaction log, used for real-time get, durability, and
         and solr cloud replica recovery.  The log can grow as big as
         uncommitted changes to the index, so use of a hard autoCommit
         is recommended (see below).
         "dir" - the target directory for transaction logs, defaults to the
                solr data directory.
         "numVersionBuckets" - sets the number of buckets used to keep
                track of max version values when checking for re-ordered
                updates; increase this value to reduce the cost of
                synchronizing access to version buckets during high-volume
                indexing, this requires 8 bytes (long) * numVersionBuckets
                of heap space per Solr core.
    -->
    <updateLog>
      <str name="dir">${solr.ulog.dir:}</str>
      <int name="numVersionBuckets">${solr.ulog.numVersionBuckets:65536}</int>
    </updateLog>

    <!-- AutoCommit

         Perform a hard commit automatically under certain conditions.
         Instead of enabling autoCommit, consider using "commitWithin"
         when adding documents.

         https://solr.apache.org/guide/solr/latest/indexing-guide/indexing-with-update-handlers.html

         maxDocs - Maximum number of documents to add since the last
                   commit before automatically triggering a new commit.

         maxTime - Maximum amount of time in ms that is allowed to pass
                   since a document was added before automatically
                   triggering a new commit.
         openSearcher - if false, the commit causes recent index changes
           to be flushed to stable storage, but does not cause a new
           searcher to be opened to make those changes visible.

         If the updateLog is enabled, then it's highly recommended to
         have some sort of hard autoCommit to limit the log size.
      -->
    <autoCommit>
      <maxTime>${solr.autoCommit.maxTime:15000}</maxTime>
      <maxDocs>2000</maxDocs>
      <openSearcher>true</openSearcher>
    </autoCommit>

    <!-- softAutoCommit is like autoCommit except it causes a
         'soft' commit which only ensures that changes are visible
         but does not ensure that data is synced to disk.  This is
         faster and more near-realtime friendly than a hard commit.
      -->

    <autoSoftCommit>
      <maxTime>${solr.autoSoftCommit.maxTime:3000}</maxTime>
    </autoSoftCommit>

    <!-- Update Related Event Listeners

         Various IndexWriter related events can trigger Listeners to
         take actions.

         postCommit - fired after every commit or optimize command
         postOptimize - fired after every optimize command
      -->

  </updateHandler>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       Query section - these settings control query time things like caches
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <query>

    <!-- Maximum number of clauses allowed when parsing a boolean query string.

         This limit only impacts boolean queries specified by a user as part of a query string,
         and provides per-collection controls on how complex user specified boolean queries can
         be.  Query strings that specify more clauses than this will result in an error.

         If this per-collection limit is greater than the global `maxBooleanClauses` limit
         specified in `solr.xml`, it will have no effect, as that setting also limits the size
         of user specified boolean queries.
      -->
    <maxBooleanClauses>${solr.max.booleanClauses:1024}</maxBooleanClauses>

    <!-- Minimum acceptable prefix-size for prefix-based queries.

         Prefix-based queries consume memory in proportion to the number of terms in the index
         that start with that prefix.  Short prefixes tend to match many many more indexed-terms
         and consume more memory as a result, sometimes causing stability issues on the node.

         This setting allows administrators to require that prefixes meet or exceed a specified
         minimum length requirement.  Prefix queries that don't meet this requirement return an
         error to users.  The limit may be overridden on a per-query basis by specifying a
         'minPrefixQueryTermLength' local-param value.

         The flag value of '-1' can be used to disable enforcement of this limit.
    -->
    <minPrefixQueryTermLength>${solr.query.minPrefixLength:-1}</minPrefixQueryTermLength>

    <!-- Solr Internal Query Caches
         Starting with Solr 9.0 the default cache implementation used is CaffeineCache.
    -->

    <!-- Filter Cache

         Cache used by SolrIndexSearcher for filters (DocSets),
         unordered sets of *all* documents that match a query.  When a
         new searcher is opened, its caches may be prepopulated or
         "autowarmed" using data from caches in the old searcher.
         autowarmCount is the number of items to prepopulate. For
         CaffeineCache, the autowarmed items will be the most recently
         accessed items.

         Parameters:
           class - the SolrCache implementation (CaffeineCache by default)
           size - the maximum number of entries in the cache
           initialSize - the initial capacity (number of entries) of
               the cache.  (see java.util.HashMap)
           autowarmCount - the number of entries to prepopulate from
               an old cache.
           maxRamMB - the maximum amount of RAM (in MB) that this cache is allowed
                      to occupy. Note that when this option is specified, the size
                      and initialSize parameters are ignored.
      -->
    <filterCache size="512"
                 initialSize="512"
                 autowarmCount="0"/>

    <!-- Query Result Cache

         Caches results of searches - ordered lists of document ids
         (DocList) based on a query, a sort, and the range of documents requested.
         Additional supported parameter by CaffeineCache:
            maxRamMB - the maximum amount of RAM (in MB) that this cache is allowed
                       to occupy
      -->
    <queryResultCache size="512"
                      initialSize="512"
                      autowarmCount="0"/>

    <!-- Document Cache

         Caches Lucene Document objects (the stored fields for each
         document).  Since Lucene internal document ids are transient,
         this cache will not be autowarmed.
      -->
    <documentCache size="512"
                   initialSize="512"
                   autowarmCount="0"/>

    <!-- custom cache currently used by block join -->
    <cache name="perSegFilter"
           class="solr.CaffeineCache"
           size="10"
           initialSize="0"
           autowarmCount="10"
           regenerator="solr.NoOpRegenerator" />

    <!-- Field Value Cache

         Cache used to hold field values that are quickly accessible
         by document id.  The fieldValueCache is created by default
         even if not configured here.
      -->
    <!--
       <fieldValueCache size="512"
                        autowarmCount="128"
                        />
      -->

    <!-- Custom Cache

         Example of a generic cache.  These caches may be accessed by
         name through SolrIndexSearcher.getCache(),cacheLookup(), and
         cacheInsert().  The purpose is to enable easy caching of
         user/application level data.  The regenerator argument should
         be specified as an implementation of solr.CacheRegenerator
         if autowarming is desired.
      -->
    <!--
       <cache name="myUserCache"
              class="solr.CaffeineCache"
              size="4096"
              initialSize="1024"
              autowarmCount="1024"
              regenerator="com.mycompany.MyRegenerator"
              />
      -->


    <!-- Lazy Field Loading

         If true, stored fields that are not requested will be loaded
         lazily.  This can result in a significant speed improvement
         if the usual case is to not load all stored fields,
         especially if the skipped fields are large compressed text
         fields.
    -->
    <enableLazyFieldLoading>true</enableLazyFieldLoading>

    <!-- Use Filter For Sorted Query

         A possible optimization that attempts to use a filter to
         satisfy a search.  If the requested sort does not include
         score, then the filterCache will be checked for a filter
         matching the query. If found, the filter will be used as the
         source of document ids, and then the sort will be applied to
         that.

         For most situations, this will not be useful unless you
         frequently get the same search repeatedly with different sort
         options, and none of them ever use "score"
      -->
    <!--
       <useFilterForSortedQuery>true</useFilterForSortedQuery>
      -->

    <!-- Result Window Size

         An optimization for use with the queryResultCache.  When a search
         is requested, a superset of the requested number of document ids
         are collected.  For example, if a search for a particular query
         requests matching documents 10 through 19, and queryWindowSize is 50,
         then documents 0 through 49 will be collected and cached.  Any further
         requests in that range can be satisfied via the cache.
      -->
    <queryResultWindowSize>20</queryResultWindowSize>

    <!-- Maximum number of documents to cache for any entry in the
         queryResultCache.
      -->
    <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

    <!-- Query Related Event Listeners

         Various IndexSearcher related events can trigger Listeners to
         take actions.

         newSearcher - fired whenever a new searcher is being prepared
         and there is a current searcher handling requests (aka
         registered).  It can be used to prime certain caches to
         prevent long request times for certain requests.

         firstSearcher - fired whenever a new searcher is being
         prepared but there is no current registered searcher to handle
         requests or to gain autowarming data from.


      -->
    <!-- QuerySenderListener takes an array of NamedList and executes a
         local query request for each NamedList in sequence.
      -->
    <listener event="newSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <!--
           <lst><str name="q">solr</str><str name="sort">price asc</str></lst>
           <lst><str name="q">rocks</str><str name="sort">weight asc</str></lst>
          -->
      </arr>
    </listener>
    <listener event="firstSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <!--
        <lst>
          <str name="q">static firstSearcher warming in solrconfig.xml</str>
        </lst>
        -->
      </arr>
    </listener>

    <!-- Use Cold Searcher

         If a search request comes in and there is no current
         registered searcher, then immediately register the still
         warming searcher and use it.  If "false" then all requests
         will block until the first searcher is done warming.
      -->
    <useColdSearcher>false</useColdSearcher>

  </query>

  <!-- Request Dispatcher

       This section contains instructions for how the SolrDispatchFilter
       should behave when processing requests for this SolrCore.

    -->
  <requestDispatcher handleSelect="true">
    <!-- Request Parsing

         These settings indicate how Solr Requests may be parsed, and
         what restrictions may be placed on the ContentStreams from
         those requests

         multipartUploadLimitInKB - specifies the max size (in KiB) of
         Multipart File Uploads that Solr will allow in a Request.

         formdataUploadLimitInKB - specifies the max size (in KiB) of
         form data (application/x-www-form-urlencoded) sent via
         POST. You can use POST to pass request parameters not
         fitting into the URL.

         addHttpRequestToContext - if set to true, it will instruct
         the requestParsers to include the original HttpServletRequest
         object in the context map of the SolrQueryRequest under the
         key "httpRequest". It will not be used by any of the existing
         Solr components, but may be useful when developing custom
         plugins.

    <requestParsers multipartUploadLimitInKB="-1"
                    formdataUploadLimitInKB="-1"
                    addHttpRequestToContext="false"/>
      -->
    <requestParsers enableRemoteStreaming="true" multipartUploadLimitInKB="2048" />

    <!-- HTTP Caching

         Set HTTP caching related parameters (for proxy caches and clients).

         The options below instruct Solr not to output any HTTP Caching
         related headers
      -->
    <httpCaching never304="true" />
    <!-- If you include a <cacheControl> directive, it will be used to
         generate a Cache-Control header (as well as an Expires header
         if the value contains "max-age=")

         By default, no Cache-Control header is generated.

         You can use the <cacheControl> option even if you have set
         never304="true"
      -->
    <!--
       <httpCaching never304="true" >
         <cacheControl>max-age=30, public</cacheControl>
       </httpCaching>
      -->
    <!-- To enable Solr to respond with automatically generated HTTP
         Caching headers, and to response to Cache Validation requests
         correctly, set the value of never304="false"

         This will cause Solr to generate Last-Modified and ETag
         headers based on the properties of the Index.

         The following options can also be specified to affect the
         values of these headers...

         lastModFrom - the default value is "openTime" which means the
         Last-Modified value (and validation against If-Modified-Since
         requests) will all be relative to when the current Searcher
         was opened.  You can change it to lastModFrom="dirLastMod" if
         you want the value to exactly correspond to when the physical
         index was last modified.

         etagSeed="..." is an option you can change to force the ETag
         header (and validation against If-None-Match requests) to be
         different even if the index has not changed (ie: when making
         significant changes to your config file)

         (lastModifiedFrom and etagSeed are both ignored if you use
         the never304="true" option)
      -->
    <!--
       <httpCaching lastModifiedFrom="openTime"
                    etagSeed="Solr">
         <cacheControl>max-age=30, public</cacheControl>
       </httpCaching>
      -->
  </requestDispatcher>

  <!-- Request Handlers

       https://solr.apache.org/guide/solr/latest/configuration-guide/requesthandlers-searchcomponents.html

       Incoming queries will be dispatched to a specific handler by name based on the path specified in the request.

       All handlers (Search Handlers, Update Request Handlers, and other specialized types) can have default parameters (defaults, appends and invariants).

       Search Handlers can also (append, prepend or even replace) default or defined Search Components.

       Update Request Handlers can leverage Update Request Processors to pre-process documents after they are loaded
       and before they are indexed/stored.

       Not all Request Handlers are defined in the solrconfig.xml, many are implicit.
    -->

  <!-- Primary search handler, expected by most clients, examples and UI frameworks -->
  <!--
  <requestHandler name="/select" class="solr.SearchHandler">
    <lst name="defaults">
      <str name="echoParams">explicit</str>
      <int name="rows">10</int>
    </lst>
  </requestHandler>
  -->

  <!-- A request handler that returns indented JSON by default -->
  <!--
  <requestHandler name="/query" class="solr.SearchHandler">
    <lst name="defaults">
      <str name="echoParams">explicit</str>
      <str name="wt">json</str>
      <str name="indent">true</str>
    </lst>
  </requestHandler>
  -->

  <!-- Shared parameters for multiple Request Handlers -->
  <!--
  <initParams path="/update/**,/query,/select,/spell">
    <lst name="defaults">
      <str name="df">_text_</str>
    </lst>
  </initParams>
  -->

  <requestHandler name="standard" class="solr.SearchHandler">
    <lst name="defaults">
      <str name="echoParams">explicit</str>
      <str name="defType">lucene</str>
    </lst>
  </requestHandler>

  <requestHandler name="/analysis/field" startup="lazy" class="solr.FieldAnalysisRequestHandler" />
  <requestHandler name="/update" class="solr.UpdateRequestHandler" />

  <requestHandler name="/admin/ping" class="solr.PingRequestHandler">
    <lst name="invariants">
      <str name="q">solrpingquery</str>
    </lst>
    <lst name="defaults">
      <str name="echoParams">all</str>
    </lst>
  </requestHandler>

  <requestHandler name="search" class="solr.SearchHandler" default="true">
    <!-- default values for query parameters can be specified, these
will be overridden by parameters in the request
-->
    <lst name="defaults">
      <str name="defType">edismax</str>
      <str name="echoParams">explicit</str>
      <str name="q.alt">*:*</str>
      <str name="mm">2&lt;-1 5&lt;-2 6&lt;90%</str>
      <int name="qs">1</int>
      <int name="ps">2</int>
      <float name="tie">0.01</float>
      <!-- this qf and pf are used by default, if not otherwise specified by
client. The default blacklight_config will use these for the
"keywords" search. See the author_qf/author_pf, title_qf, etc
below, which the default blacklight_config will specify for
those searches. You may also be interested in:
http://wiki.apache.org/solr/LocalParams
-->
      <str name="qf">
        id
        title_info_primary_tsi^1000
        title_info_primary_trans_tsim^500
        title_info_primary_subtitle_tsi^500
        title_info_alternative_tsim^500
        title_info_translated_tsim^500
        title_info_uniform_tsim^100
        title_info_other_subtitle_tsim^100
        name_tsim^20
        name_role_tsim
        abstract_tsi^30
        genre_basic_tim
        genre_specific_tim
        publisher_tsi^20
        pubplace_tsi
        edition_name_tsim
        issuance_tsi
        date_tsim
        table_of_contents_tsi^30
        note_tsim^10
        note_resp_tsim^20
        note_date_tsim
        note_performers_tsim^10
        note_acquisition_tsim^10
        note_ownership_tsim^10
        note_citation_tsim^10
        note_reference_tsim^10
        note_exhibitions_tsim^10
        note_arrangement_tsim^10
        note_language_tsim^10
        note_funding_tsim^10
        note_biographical_tsim^10
        note_publications_tsim^10
        note_credits_tsim^10
        note_physical_tsim^10
        collection_name_tim^10
        physical_location_tim^20
        sub_location_tsi
        shelf_locator_tsi
        subject_topic_tsim^100
        subject_name_tsim^100
        subject_geographic_tim^100
        subject_temporal_tsim^50
        scale_tsim
        projection_tsi
        subject_date_tsim
        subject_title_tsim^100
        related_item_host_tim^10
        related_item_series_ti^10
        related_item_subseries_ti^10
        related_item_subsubseries_ti^10
        identifier_local_other_tsim
        identifier_local_other_invalid_tsim
        identifier_local_accession_tsim
        identifier_local_call_tsim
        identifier_local_call_invalid_tsim
        identifier_local_barcode_tsim
        identifier_local_barcode_invalid_tsim
        identifier_isbn_ssim
        identifier_lccn_ssim
        identifier_issn_ssim
        identifier_ismn_ssim
        identifier_isrc_ssim
        identifier_issue_number_ssim
        identifier_matrix_number_ssim
        identifier_music_plate_ssim
        identifier_music_publisher_ssim
        identifier_sici_ssim
        identifier_videorecording_ssim
        identifier_ia_id_ssi
        extent_tsi
        institution_name_ti^10
        institution_ark_id_ssi
        filenames_ssim
        lang_term_ssim
      </str>
      <str name="pf">
        title_info_primary_tsi^5000
        title_info_primary_trans_tsim^1000
        title_info_alternative_tsim^1000
        title_info_translated_tsim^1000
        title_info_uniform_tsim^500
        title_info_primary_subtitle_tsi^800
        title_info_other_subtitle_tsim^500
        name_tsim^200
        subject_topic_tsim^1000
        subject_name_tsim^1000
        subject_geographic_tim^1000
        subject_title_tsim^1000
        related_item_*^100
      </str>

      <!-- same as the default qf, but with OCR text fields -->
      <str name="fulltext_qf">
        id
        title_info_primary_tsi^1000
        title_info_primary_trans_tsim^500
        title_info_primary_subtitle_tsi^500
        title_info_alternative_tsim^500
        title_info_translated_tsim^500
        title_info_uniform_tsim^100
        title_info_other_subtitle_tsim^100
        name_tsim^20
        name_role_tsim
        abstract_tsi^30
        genre_basic_tim
        genre_specific_tim
        publisher_tsi^20
        pubplace_tsi
        edition_name_tsim
        issuance_tsi
        date_tsim
        table_of_contents_tsi^30
        note_tsim^10
        note_resp_tsim^20
        note_date_tsim
        note_performers_tsim^10
        note_acquisition_tsim^10
        note_ownership_tsim^10
        note_citation_tsim^10
        note_reference_tsim^10
        note_exhibitions_tsim^10
        note_arrangement_tsim^10
        note_language_tsim^10
        note_funding_tsim^10
        note_biographical_tsim^10
        note_publications_tsim^10
        note_credits_tsim^10
        note_physical_tsim^10
        collection_name_tim^10
        physical_location_tim^20
        sub_location_tsi
        shelf_locator_tsi
        subject_topic_tsim^100
        subject_name_tsim^100
        subject_geographic_tim^100
        subject_temporal_tsim^50
        scale_tsim
        projection_tsi
        subject_date_tsim
        subject_title_tsim^100
        related_item_host_tim^10
        related_item_series_ti^10
        related_item_subseries_ti^10
        related_item_subsubseries_ti^10
        identifier_local_other_tsim
        identifier_local_other_invalid_tsim
        identifier_local_accession_tsim
        identifier_local_call_tsim
        identifier_local_call_invalid_tsim
        identifier_local_barcode_tsim
        identifier_local_barcode_invalid_tsim
        identifier_isbn_ssim
        identifier_lccn_ssim
        identifier_issn_ssim
        identifier_ismn_ssim
        identifier_isrc_ssim
        identifier_issue_number_ssim
        identifier_matrix_number_ssim
        identifier_music_plate_ssim
        identifier_music_publisher_ssim
        identifier_sici_ssim
        identifier_videorecording_ssim
        identifier_ia_id_ssi
        extent_tsi
        institution_name_ti^10
        institution_ark_id_ssi
        filenames_ssim
        lang_term_ssim
        ocr_tiv
        ocr_tsiv
      </str>
      <!-- same as default pf, but with OCR text fields -->
      <str name="fulltext_pf">
        title_info_primary_tsi^5000
        title_info_primary_trans_tsim^1000
        title_info_alternative_tsim^1000
        title_info_translated_tsim^1000
        title_info_uniform_tsim^500
        title_info_primary_subtitle_tsi^800
        title_info_other_subtitle_tsim^500
        name_tsim^200
        subject_topic_tsim^1000
        subject_name_tsim^1000
        subject_geographic_tim^1000
        subject_title_tsim^1000
        related_item_*^100
        ocr_tiv
        ocr_tsiv
      </str>

      <str name="author_qf">
        name_tsim^20
        note_resp_tsim
      </str>
      <str name="author_pf">
        name_tsim^200
        note_resp_tsim
      </str>

      <str name="title_qf">
        title_info_primary_tsi^500
        title_info_primary_subtitle_tsi^80
        title_info_primary_trans_tsim^100
        title_info_alternative_tsim^100
        title_info_translated_tsim^100
        title_info_uniform_tsim^50
        title_info_other_subtitle_tsim^80
      </str>
      <str name="title_pf">
        title_info_primary_tsi^5000
        title_info_primary_trans_tsim^1000
        title_info_alternative_tsim^1000
        title_info_translated_tsim^1000
        title_info_uniform_tsim^500
        title_info_primary_subtitle_tsi^800
        title_info_other_subtitle_tsim^800
      </str>

      <str name="subject_qf">
        subject_topic_tsim^100
        subject_name_tsim^100
        subject_geographic_tim^100
        subject_date_tsim
        subject_temporal_tsim^50
        subject_title_tsim^100
      </str>
      <str name="subject_pf">
        subject_topic_tsim^1000
        subject_name_tsim^1000
        subject_geographic_tim^1000
        subject_title_tsim^1000
        subject_date_tsim
        subject_temporal_tsim^500
      </str>

      <str name="place_qf">
        subject_geographic_tim^500
        subject_topic_tsim^50
        title_info_primary_tsi^20
        title_info_primary_subtitle_tsi^5
        title_info_other_subtitle_tsim^5
        abstract_tsi
        table_of_contents_tsi
        institution_name_ti^10
        physical_location_tim^10
        pubplace_tsi
      </str>
      <str name="place_pf">
        subject_geographic_tim^2000
        subject_topic_tsim^500
        title_info_primary_tsi^200
        title_info_primary_subtitle_tsi^50
        title_info_other_subtitle_tsim^50
        institution_name_ti^100
        physical_location_tim^100
      </str>

      <str name="fulltext_only_qf">
        ocr_tiv
        ocr_tsiv
      </str>
      <str name="fulltext_only_pf">
        ocr_tiv
        ocr_tsiv
      </str>

      <str name="fl">
        *,
        score
      </str>

      <str name="facet">true</str>
      <str name="facet.mincount">1</str>
      <str name="facet.limit">10</str>

      <str name="spellcheck">true</str>
      <str name="spellcheck.dictionary">default</str>
      <str name="spellcheck.onlyMorePopular">true</str>
      <str name="spellcheck.extendedResults">false</str>
      <str name="spellcheck.collate">false</str>
      <str name="spellcheck.count">5</str>

    </lst>
    <arr name="last-components">
      <str>spellcheck</str>
    </arr>
  </requestHandler>

  <requestHandler name="/advanced" class="solr.SearchHandler">
    <!-- a lucene request handler for using the JSON Query DSL,
         specifically for advanced search.
         Using a separate requestHandler is a workaround to
         https://issues.apache.org/jira/browse/SOLR-16916, although
         it could be desirable for other reasons as well.
      -->
    <lst name="defaults">
      <str name="defType">lucene</str>
      <str name="echoParams">explicit</str>
      <str name="qf">
        id
        title_info_primary_tsi^1000
        title_info_primary_trans_tsim^500
        title_info_primary_subtitle_tsi^500
        title_info_alternative_tsim^500
        title_info_translated_tsim^500
        title_info_uniform_tsim^100
        title_info_other_subtitle_tsim^100
        name_tsim^20
        name_role_tsim
        abstract_tsi^30
        genre_basic_tim
        genre_specific_tim
        publisher_tsi^20
        pubplace_tsi
        edition_name_tsim
        issuance_tsi
        date_tsim
        table_of_contents_tsi^30
        note_tsim^10
        note_resp_tsim^20
        note_date_tsim
        note_performers_tsim^10
        note_acquisition_tsim^10
        note_ownership_tsim^10
        note_citation_tsim^10
        note_reference_tsim^10
        note_exhibitions_tsim^10
        note_arrangement_tsim^10
        note_language_tsim^10
        note_funding_tsim^10
        note_biographical_tsim^10
        note_publications_tsim^10
        note_credits_tsim^10
        note_physical_tsim^10
        collection_name_tim^10
        physical_location_tim^20
        sub_location_tsi
        shelf_locator_tsi
        subject_topic_tsim^100
        subject_name_tsim^100
        subject_geographic_tim^100
        subject_temporal_tsim^50
        scale_tsim
        projection_tsi
        subject_date_tsim
        subject_title_tsim^100
        related_item_host_tim^10
        related_item_series_ti^10
        related_item_subseries_ti^10
        related_item_subsubseries_ti^10
        identifier_local_other_tsim
        identifier_local_other_invalid_tsim
        identifier_local_accession_tsim
        identifier_local_call_tsim
        identifier_local_call_invalid_tsim
        identifier_local_barcode_tsim
        identifier_local_barcode_invalid_tsim
        identifier_isbn_ssim
        identifier_lccn_ssim
        identifier_issn_ssim
        identifier_ismn_ssim
        identifier_isrc_ssim
        identifier_issue_number_ssim
        identifier_matrix_number_ssim
        identifier_music_plate_ssim
        identifier_music_publisher_ssim
        identifier_sici_ssim
        identifier_videorecording_ssim
        identifier_ia_id_ssi
        extent_tsi
        institution_name_ti^10
        institution_ark_id_ssi
        filenames_ssim
        lang_term_ssim
      </str>
      <str name="pf">
        title_info_primary_tsi^5000
        title_info_primary_trans_tsim^1000
        title_info_alternative_tsim^1000
        title_info_translated_tsim^1000
        title_info_uniform_tsim^500
        title_info_primary_subtitle_tsi^800
        title_info_other_subtitle_tsim^500
        name_tsim^200
        subject_topic_tsim^1000
        subject_name_tsim^1000
        subject_geographic_tim^1000
        subject_title_tsim^1000
        related_item_*^100
      </str>

      <!-- same as the default qf, but with OCR text fields -->
      <str name="fulltext_qf">
        id
        title_info_primary_tsi^1000
        title_info_primary_trans_tsim^500
        title_info_primary_subtitle_tsi^500
        title_info_alternative_tsim^500
        title_info_translated_tsim^500
        title_info_uniform_tsim^100
        title_info_other_subtitle_tsim^100
        name_tsim^20
        name_role_tsim
        abstract_tsi^30
        genre_basic_tim
        genre_specific_tim
        publisher_tsi^20
        pubplace_tsi
        edition_name_tsim
        issuance_tsi
        date_tsim
        table_of_contents_tsi^30
        note_tsim^10
        note_resp_tsim^20
        note_date_tsim
        note_performers_tsim^10
        note_acquisition_tsim^10
        note_ownership_tsim^10
        note_citation_tsim^10
        note_reference_tsim^10
        note_exhibitions_tsim^10
        note_arrangement_tsim^10
        note_language_tsim^10
        note_funding_tsim^10
        note_biographical_tsim^10
        note_publications_tsim^10
        note_credits_tsim^10
        note_physical_tsim^10
        collection_name_tim^10
        physical_location_tim^20
        sub_location_tsi
        shelf_locator_tsi
        subject_topic_tsim^100
        subject_name_tsim^100
        subject_geographic_tim^100
        subject_temporal_tsim^50
        scale_tsim
        projection_tsi
        subject_date_tsim
        subject_title_tsim^100
        related_item_host_tim^10
        related_item_series_ti^10
        related_item_subseries_ti^10
        related_item_subsubseries_ti^10
        identifier_local_other_tsim
        identifier_local_other_invalid_tsim
        identifier_local_accession_tsim
        identifier_local_call_tsim
        identifier_local_call_invalid_tsim
        identifier_local_barcode_tsim
        identifier_local_barcode_invalid_tsim
        identifier_isbn_ssim
        identifier_lccn_ssim
        identifier_issn_ssim
        identifier_ismn_ssim
        identifier_isrc_ssim
        identifier_issue_number_ssim
        identifier_matrix_number_ssim
        identifier_music_plate_ssim
        identifier_music_publisher_ssim
        identifier_sici_ssim
        identifier_videorecording_ssim
        identifier_ia_id_ssi
        extent_tsi
        institution_name_ti^10
        institution_ark_id_ssi
        filenames_ssim
        lang_term_ssim
        ocr_tiv
        ocr_tsiv
      </str>
      <!-- same as default pf, but with OCR text fields -->
      <str name="fulltext_pf">
        title_info_primary_tsi^5000
        title_info_primary_trans_tsim^1000
        title_info_alternative_tsim^1000
        title_info_translated_tsim^1000
        title_info_uniform_tsim^500
        title_info_primary_subtitle_tsi^800
        title_info_other_subtitle_tsim^500
        name_tsim^200
        subject_topic_tsim^1000
        subject_name_tsim^1000
        subject_geographic_tim^1000
        subject_title_tsim^1000
        related_item_*^100
        ocr_tiv
        ocr_tsiv
      </str>

      <str name="author_qf">
        name_tsim^20
        note_resp_tsim
      </str>
      <str name="author_pf">
        name_tsim^200
        note_resp_tsim
      </str>

      <str name="title_qf">
        title_info_primary_tsi^500
        title_info_primary_subtitle_tsi^80
        title_info_primary_trans_tsim^100
        title_info_alternative_tsim^100
        title_info_translated_tsim^100
        title_info_uniform_tsim^50
        title_info_other_subtitle_tsim^80
      </str>
      <str name="title_pf">
        title_info_primary_tsi^5000
        title_info_primary_trans_tsim^1000
        title_info_alternative_tsim^1000
        title_info_translated_tsim^1000
        title_info_uniform_tsim^500
        title_info_primary_subtitle_tsi^800
        title_info_other_subtitle_tsim^800
      </str>

      <str name="subject_qf">
        subject_topic_tsim^100
        subject_name_tsim^100
        subject_geographic_tim^100
        subject_date_tsim
        subject_temporal_tsim^50
        subject_title_tsim^100
      </str>
      <str name="subject_pf">
        subject_topic_tsim^1000
        subject_name_tsim^1000
        subject_geographic_tim^1000
        subject_title_tsim^1000
        subject_date_tsim
        subject_temporal_tsim^500
      </str>

      <str name="place_qf">
        subject_geographic_tim^500
        subject_topic_tsim^50
        title_info_primary_tsi^20
        title_info_primary_subtitle_tsi^5
        title_info_other_subtitle_tsim^5
        abstract_tsi
        table_of_contents_tsi
        institution_name_ti^10
        physical_location_tim^10
        pubplace_tsi
      </str>
      <str name="place_pf">
        subject_geographic_tim^2000
        subject_topic_tsim^500
        title_info_primary_tsi^200
        title_info_primary_subtitle_tsi^50
        title_info_other_subtitle_tsim^50
        institution_name_ti^100
        physical_location_tim^100
      </str>

      <str name="fulltext_only_qf">
        ocr_tiv
        ocr_tsiv
      </str>
      <str name="fulltext_only_pf">
        ocr_tiv
        ocr_tsiv
      </str>

      <str name="fl">
        *,
        score
      </str>

      <str name="facet">true</str>
      <str name="facet.mincount">1</str>
      <str name="facet.limit">10</str>

      <str name="spellcheck">true</str>
      <str name="spellcheck.dictionary">default</str>
      <str name="spellcheck.onlyMorePopular">true</str>
      <str name="spellcheck.extendedResults">false</str>
      <str name="spellcheck.collate">false</str>
      <str name="spellcheck.count">5</str>

    </lst>
    <arr name="last-components">
      <str>spellcheck</str>
    </arr>
  </requestHandler>

  <!-- for requests to get a single document -->
  <requestHandler name="document" class="solr.SearchHandler" >
    <lst name="defaults">
      <str name="echoParams">all</str>
      <str name="fl">*</str>
      <str name="rows">1</str>
      <str name="q">{!term f=id v=$id}</str> <!-- use id=666 instead of q=id:666 -->
    </lst>
  </requestHandler>

  <!-- for "more like this" link in catalog#show -->
  <requestHandler name="mlt_qparser" class="solr.SearchHandler">
    <lst name="defaults">
      <str name="fl">
        *,
        score
      </str>
      <str name="facet.mincount">1</str>
      <str name="echoParams">explicit</str>
      <str name="q">{!mlt mintf=1 mindf=1 qf=$qf v=$id}</str>
    </lst>
  </requestHandler>

  <!-- suggest searchComponent for autocomplete -->
  <searchComponent name="suggest" class="solr.SuggestComponent">
    <lst name="suggester">
      <str name="name">mySuggester</str>
      <str name="lookupImpl">FuzzyLookupFactory</str>
      <bool name="exactMatchFirst">true</bool>
      <str name="dictionaryImpl">HighFrequencyDictionaryFactory</str>
      <!-- <float name="threshold">.00004</float> --> <!-- may need to tweak for production -->
      <str name="field">suggest</str>
      <str name="suggestAnalyzerFieldType">text_suggest</str>
      <str name="buildOnStartup">false</str>
      <str name="buildOnCommit">false</str>
      <str name="buildOnOptimize">false</str>
    </lst>
  </searchComponent>

  <!-- suggest requestHandler for autocomplete -->
  <requestHandler name="/suggest" class="solr.SearchHandler" startup="lazy">
    <lst name="defaults">
      <str name="suggest">true</str>
      <str name="suggest.count">5</str>
      <str name="suggest.dictionary">mySuggester</str>
    </lst>
    <arr name="components">
      <str>suggest</str>
    </arr>
  </requestHandler>

  <!-- Spell Check

       The spell check component can return a list of alternative spelling
       suggestions.

       https://solr.apache.org/guide/solr/latest/query-guide/spell-checking.html
    -->
  <searchComponent name="spellcheck" class="solr.SpellCheckComponent">

    <str name="queryAnalyzerFieldType">text_spell</str>

    <!-- Multiple "Spell Checkers" can be declared and used by this
         component
      -->

    <!-- a spellchecker built from a field of the main index -->
    <lst name="spellchecker">
      <str name="name">default</str>
      <str name="field">spell</str>
      <str name="classname">solr.DirectSolrSpellChecker</str>
      <!-- the spellcheck distance measure used, the default is the internal levenshtein -->
      <str name="distanceMeasure">internal</str>
      <!-- minimum accuracy needed to be considered a valid spellcheck suggestion -->
      <float name="accuracy">0.5</float>
      <!-- the maximum #edits we consider when enumerating terms: can be 1 or 2 -->
      <int name="maxEdits">2</int>
      <!-- the minimum shared prefix when enumerating terms -->
      <int name="minPrefix">1</int>
      <!-- maximum number of inspections per result. -->
      <int name="maxInspections">5</int>
      <!-- minimum length of a query term to be considered for correction -->
      <int name="minQueryLength">4</int>
      <!-- maximum threshold of documents a query term can appear to be considered for correction -->
      <float name="maxQueryFrequency">0.01</float>
      <!-- uncomment this to require suggestions to occur in 1% of the documents
        <float name="thresholdTokenFrequency">.01</float>
      -->
    </lst>
  </searchComponent>

  <!-- Highlighting Component

       https://solr.apache.org/guide/solr/latest/query-guide/highlighting.html
    -->
  <searchComponent class="solr.HighlightComponent" name="highlight">
    <!-- note: the hl.method=unified highlighter is not configured here; it's completely configured
    via parameters.  The below configuration supports hl.method=original and fastVector. -->
    <highlighting>
      <!-- Configure the standard fragmenter -->
      <!-- This could most likely be commented out in the "default" case -->
      <fragmenter name="gap"
                  default="true"
                  class="solr.highlight.GapFragmenter">
        <lst name="defaults">
          <int name="hl.fragsize">100</int>
        </lst>
      </fragmenter>

      <!-- A regular-expression-based fragmenter
           (for sentence extraction)
        -->
      <fragmenter name="regex"
                  class="solr.highlight.RegexFragmenter">
        <lst name="defaults">
          <!-- slightly smaller fragsizes work better because of slop -->
          <int name="hl.fragsize">70</int>
          <!-- allow 50% slop on fragment sizes -->
          <float name="hl.regex.slop">0.5</float>
          <!-- a basic sentence pattern -->
          <str name="hl.regex.pattern">[-\w ,/\n\&quot;&apos;]{20,200}</str>
        </lst>
      </fragmenter>

      <!-- Configure the standard formatter -->
      <formatter name="html"
                 default="true"
                 class="solr.highlight.HtmlFormatter">
        <lst name="defaults">
          <str name="hl.simple.pre"><![CDATA[<em>]]></str>
          <str name="hl.simple.post"><![CDATA[</em>]]></str>
        </lst>
      </formatter>

      <!-- Configure the standard encoder -->
      <encoder name="html"
               class="solr.highlight.HtmlEncoder" />

      <!-- Configure the standard fragListBuilder -->
      <fragListBuilder name="simple"
                       class="solr.highlight.SimpleFragListBuilder"/>

      <!-- Configure the single fragListBuilder -->
      <fragListBuilder name="single"
                       class="solr.highlight.SingleFragListBuilder"/>

      <!-- Configure the weighted fragListBuilder -->
      <fragListBuilder name="weighted"
                       default="true"
                       class="solr.highlight.WeightedFragListBuilder"/>

      <!-- default tag FragmentsBuilder -->
      <fragmentsBuilder name="default"
                        default="true"
                        class="solr.highlight.ScoreOrderFragmentsBuilder">
        <!--
        <lst name="defaults">
          <str name="hl.multiValuedSeparatorChar">/</str>
        </lst>
        -->
      </fragmentsBuilder>

      <!-- multi-colored tag FragmentsBuilder -->
      <fragmentsBuilder name="colored"
                        class="solr.highlight.ScoreOrderFragmentsBuilder">
        <lst name="defaults">
          <str name="hl.tag.pre"><![CDATA[
               <b style="background:yellow">,<b style="background:lawgreen">,
               <b style="background:aquamarine">,<b style="background:magenta">,
               <b style="background:palegreen">,<b style="background:coral">,
               <b style="background:wheat">,<b style="background:khaki">,
               <b style="background:lime">,<b style="background:deepskyblue">]]></str>
          <str name="hl.tag.post"><![CDATA[</b>]]></str>
        </lst>
      </fragmentsBuilder>

      <boundaryScanner name="default"
                       default="true"
                       class="solr.highlight.SimpleBoundaryScanner">
        <lst name="defaults">
          <str name="hl.bs.maxScan">10</str>
          <str name="hl.bs.chars">.,!? &#9;&#10;&#13;</str>
        </lst>
      </boundaryScanner>

      <boundaryScanner name="breakIterator"
                       class="solr.highlight.BreakIteratorBoundaryScanner">
        <lst name="defaults">
          <!-- type should be one of CHARACTER, WORD(default), LINE and SENTENCE -->
          <str name="hl.bs.type">WORD</str>
          <!-- language and country are used when constructing Locale object.  -->
          <!-- And the Locale object will be used when getting instance of BreakIterator -->
          <str name="hl.bs.language">en</str>
          <str name="hl.bs.country">US</str>
        </lst>
      </boundaryScanner>
    </highlighting>
  </searchComponent>

  <!-- TODO: do we still need the replication requestHandler ? -->
  <!--
  <requestHandler name="/replication" class="solr.ReplicationHandler">
    <lst>
        <str name="replicateAfter">commit</str>
        <str name="replicateAfter">startup</str>
        <str name="confFiles">schema.xml,stopwords.txt</str>
    </lst>
  </requestHandler>
  -->

  <!-- Update Request Processors
       https://solr.apache.org/guide/solr/latest/configuration-guide/update-request-processors.html

       Chains or individual Update Request Processor Factories can be declared and referenced
       to preprocess documents sent to Update Request Handlers.
    -->

  <!-- to support dynamic sitemaps (add_hash_id) -->
  <updateProcessor class="solr.processor.SignatureUpdateProcessorFactory" name="add_hash_id">
    <bool name="enabled">true</bool>
    <str name="signatureField">hashed_id_si</str>
    <bool name="overwriteDupes">false</bool>
    <str name="fields">id</str>
    <str name="signatureClass">solr.processor.Lookup3Signature</str>
  </updateProcessor>

  <updateRequestProcessorChain name="cloud" processor="add_hash_id" default="true">
    <processor class="solr.LogUpdateProcessorFactory"/>
    <processor class="solr.RunUpdateProcessorFactory"/>
  </updateRequestProcessorChain>

  <!-- config for the admin interface -->
  <admin>
    <defaultQuery>search</defaultQuery>
  </admin>

  <!-- https://solr.apache.org/guide/solr/latest/deployment-guide/solrcloud-distributed-requests.html#distributedidf
       ExactStatsCache uses global values (across the collection) for 
       document frequency. It’s recommended to choose this option if 
       precise scoring across nodes is important for your implementation -->
  <statsCache class="org.apache.solr.search.stats.ExactStatsCache"/>
</config>
